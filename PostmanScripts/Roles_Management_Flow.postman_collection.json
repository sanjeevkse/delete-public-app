{
  "info": {
    "name": "Roles Management Flow",
    "description": "Complete flow for authentication and roles management with comprehensive failure state handling",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Auth Flow",
      "item": [
        {
          "name": "1. Request OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has OTP\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('otp');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('attemptsLeft');",
                  "    ",
                  "    // Save OTP for login step",
                  "    pm.collectionVariables.set(\"otp\", jsonData.otp);",
                  "    console.log(\"OTP received:\", jsonData.otp);",
                  "});",
                  "",
                  "pm.test(\"Message indicates success\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('OTP generated successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contactNumber\": \"{{contactNumber}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/request-otp",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "request-otp"]
            },
            "description": "Request OTP for the provided contact number"
          },
          "response": []
        },
        {
          "name": "2. Login with OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData).to.have.property('access');",
                  "    ",
                  "    // Save token for authenticated requests",
                  "    pm.collectionVariables.set(\"authToken\", jsonData.token);",
                  "    ",
                  "    // Save user ID",
                  "    pm.collectionVariables.set(\"userId\", jsonData.user.id);",
                  "    ",
                  "    console.log(\"Authentication successful. Token saved.\");",
                  "    console.log(\"User ID:\", jsonData.user.id);",
                  "});",
                  "",
                  "pm.test(\"Token is not empty\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.be.a('string').and.not.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contactNumber\": \"{{contactNumber}}\",\n  \"otp\": \"{{otp}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with OTP and receive authentication token"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Permissions",
      "item": [
        {
          "name": "3. List All Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains permissions array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    ",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('permissionKey');",
                  "        pm.expect(jsonData[0]).to.have.property('description');",
                  "        ",
                  "        // Save first permission ID for role creation",
                  "        pm.collectionVariables.set(\"permissionId1\", jsonData[0].id);",
                  "        if (jsonData.length > 1) {",
                  "            pm.collectionVariables.set(\"permissionId2\", jsonData[1].id);",
                  "        }",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Permissions have group association\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('group');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/roles/permissions",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "permissions"]
            },
            "description": "Get all available permissions in the system"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Role Management - Success",
      "item": [
        {
          "name": "4. List All Roles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains roles array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Roles have permissions\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('permissions');",
                  "        pm.expect(jsonData[0].permissions).to.be.an('array');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles"]
            },
            "description": "List all roles with their associated permissions"
          },
          "response": []
        },
        {
          "name": "5. Create Role - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Role created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('dispName');",
                  "    pm.expect(jsonData).to.have.property('description');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    ",
                  "    // Save role ID for future operations",
                  "    pm.collectionVariables.set(\"roleId\", jsonData.id);",
                  "    ",
                  "    console.log(\"Role created with ID:\", jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"Role has permissions\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('permissions');",
                  "    pm.expect(jsonData.permissions).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Role name matches\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.dispName).to.equal('Community Manager');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"dispName\": \"Community Manager\",\n  \"description\": \"Role for managing community posts and events\",\n  \"status\": 1,\n  \"permissions\": [\n    {{permissionId1}},\n    {{permissionId2}}\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles"]
            },
            "description": "Create a new role with permissions assigned"
          },
          "response": []
        },
        {
          "name": "6. Create Role with Parent Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Role created with parent role\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('metaUserRoleId');",
                  "    ",
                  "    // Save child role ID",
                  "    pm.collectionVariables.set(\"childRoleId\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"dispName\": \"Junior Community Manager\",\n  \"description\": \"Junior role inheriting from Community Manager\",\n  \"status\": 1,\n  \"metaUserRoleId\": {{roleId}},\n  \"permissions\": [\n    {{permissionId1}}\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles"]
            },
            "description": "Create a role with a parent role (role hierarchy)"
          },
          "response": []
        },
        {
          "name": "7. Update Role - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Role updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('dispName');",
                  "    pm.expect(jsonData).to.have.property('permissions');",
                  "});",
                  "",
                  "pm.test(\"Description updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.description).to.include('Updated');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Updated: Role for managing community posts, events and user engagement\",\n  \"permissions\": [\n    {{permissionId1}}\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles/{{roleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "{{roleId}}"]
            },
            "description": "Update an existing role's description and permissions"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Role Management - Failure States",
      "item": [
        {
          "name": "8. Create Role - No Auth Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error indicates missing authentication\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"dispName\": \"Test Role\",\n  \"description\": \"This should fail\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles"]
            },
            "description": "Failure: Attempt to create role without authentication token"
          },
          "response": []
        },
        {
          "name": "9. Create Role - Missing Display Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates missing dispName\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('dispName is required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Role without display name\",\n  \"status\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles"]
            },
            "description": "Failure: Create role without dispName"
          },
          "response": []
        },
        {
          "name": "10. Update Role - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates role not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Role not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Updated description\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles/999999",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "999999"]
            },
            "description": "Failure: Update non-existent role"
          },
          "response": []
        },
        {
          "name": "11. Delete Role - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates role not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Role not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/roles/999999",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "999999"]
            },
            "description": "Failure: Delete non-existent role"
          },
          "response": []
        },
        {
          "name": "12. List Roles - No Auth Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error indicates missing authentication\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles"]
            },
            "description": "Failure: List roles without authentication"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Role Operations - Additional",
      "item": [
        {
          "name": "13. Get All Roles Again",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response includes created role\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var roleId = pm.collectionVariables.get('roleId');",
                  "    var found = jsonData.some(role => role.id == roleId);",
                  "    pm.expect(found).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles"]
            },
            "description": "Verify the created role appears in the roles list"
          },
          "response": []
        },
        {
          "name": "14. Delete Child Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "console.log(\"Child role deleted successfully\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/roles/{{childRoleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "{{childRoleId}}"]
            },
            "description": "Delete the child role (soft delete - sets status to 0)"
          },
          "response": []
        },
        {
          "name": "15. Delete Main Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "console.log(\"Main role deleted successfully\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/roles/{{roleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "{{roleId}}"]
            },
            "description": "Delete the main created role (soft delete - sets status to 0)"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://public.nammarajajinagar.com",
      "type": "string"
    },
    {
      "key": "contactNumber",
      "value": "",
      "type": "string",
      "description": "Enter your mobile number here when running the collection"
    },
    {
      "key": "otp",
      "value": "",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "roleId",
      "value": "",
      "type": "string"
    },
    {
      "key": "childRoleId",
      "value": "",
      "type": "string"
    },
    {
      "key": "permissionId1",
      "value": "",
      "type": "string"
    },
    {
      "key": "permissionId2",
      "value": "",
      "type": "string"
    }
  ]
}
