{
  "info": {
    "_postman_id": "c6b83af7-8848-4fcb-bd1b-6ddb23cde262",
    "name": "Post Creation Flow",
    "description": "Complete flow for authentication and post creation with comprehensive failure state handling",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
    "_exporter_id": "1182352"
  },
  "item": [
    {
      "name": "Auth Flow",
      "item": [
        {
          "name": "1. Request OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has OTP\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('otp');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('attemptsLeft');",
                  "    ",
                  "    // Save OTP for login step",
                  "    pm.collectionVariables.set(\"otp\", jsonData.otp);",
                  "    console.log(\"OTP received:\", jsonData.otp);",
                  "});",
                  "",
                  "pm.test(\"Message indicates success\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('OTP generated successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contactNumber\": \"{{contactNumber}}\"\n}"
            },
            "url": "{{baseUrl}}/auth/request-otp",
            "description": "Request OTP for the provided contact number"
          },
          "response": []
        },
        {
          "name": "2. Login with OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData).to.have.property('access');",
                  "    ",
                  "    // Save token for authenticated requests",
                  "    pm.collectionVariables.set(\"authToken\", jsonData.token);",
                  "    ",
                  "    // Save user ID for post creation",
                  "    pm.collectionVariables.set(\"userId\", jsonData.user.id);",
                  "    ",
                  "    console.log(\"Authentication successful. Token saved.\");",
                  "    console.log(\"User ID:\", jsonData.user.id);",
                  "});",
                  "",
                  "pm.test(\"Token is not empty\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.be.a('string').and.not.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contactNumber\": \"{{contactNumber}}\",\n  \"otp\": \"{{otp}}\"\n}"
            },
            "url": "{{baseUrl}}/auth/login",
            "description": "Login with OTP and receive authentication token"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Post Creation - Success",
      "item": [
        {
          "name": "3. Create Post - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Post created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('description');",
                  "    pm.expect(jsonData).to.have.property('latitude');",
                  "    pm.expect(jsonData).to.have.property('longitude');",
                  "    ",
                  "    // Save post ID for future operations",
                  "    pm.collectionVariables.set(\"postId\", jsonData.id);",
                  "    ",
                  "    console.log(\"Post created with ID:\", jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"Post has reaction counts\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('likesCount');",
                  "    pm.expect(jsonData).to.have.property('dislikesCount');",
                  "});",
                  "",
                  "pm.test(\"Post has author information\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('author');",
                  "    pm.expect(jsonData.author).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Test post created from Postman - Beautiful sunset at the park!\",\n  \"latitude\": 12.9716,\n  \"longitude\": 77.5946,\n  \"tags\": [\"sunset\", \"nature\", \"bangalore\"],\n  \"images\": [\n    {\n      \"imageUrl\": \"https://example.com/image1.jpg\",\n      \"caption\": \"Beautiful sunset view\"\n    },\n    {\n      \"imageUrl\": \"https://example.com/image2.jpg\",\n      \"caption\": \"Evening colors\"\n    }\n  ]\n}"
            },
            "url": "{{baseUrl}}/posts",
            "description": "Create a new post with description, location, tags, and images"
          },
          "response": []
        },
        {
          "name": "4. Get Created Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Post details retrieved\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get('postId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": "{{baseUrl}}/posts/{{postId}}",
            "description": "Retrieve the created post details"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Post Creation - Failure States",
      "item": [
        {
          "name": "5. Create Post - No Auth Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error indicates missing authentication\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"This should fail - no auth token\",\n  \"latitude\": 12.9716,\n  \"longitude\": 77.5946\n}"
            },
            "url": "{{baseUrl}}/posts",
            "description": "Failure: Attempt to create post without authentication token"
          },
          "response": []
        },
        {
          "name": "6. Create Post - Missing Description",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates missing description\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('description');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"latitude\": 12.9716,\n  \"longitude\": 77.5946\n}"
            },
            "url": "{{baseUrl}}/posts",
            "description": "Failure: Create post without description"
          },
          "response": []
        },
        {
          "name": "7. Create Post - Missing Latitude",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates missing latitude\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('latitude');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Missing latitude\",\n  \"longitude\": 77.5946\n}"
            },
            "url": "{{baseUrl}}/posts",
            "description": "Failure: Create post without latitude"
          },
          "response": []
        },
        {
          "name": "8. Create Post - Missing Longitude",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates missing longitude\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('longitude');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Missing longitude\",\n  \"latitude\": 12.9716\n}"
            },
            "url": "{{baseUrl}}/posts",
            "description": "Failure: Create post without longitude"
          },
          "response": []
        },
        {
          "name": "9. Create Post - Invalid Latitude",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates invalid latitude\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('latitude');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Invalid latitude value\",\n  \"latitude\": \"not-a-number\",\n  \"longitude\": 77.5946\n}"
            },
            "url": "{{baseUrl}}/posts",
            "description": "Failure: Create post with invalid latitude format"
          },
          "response": []
        },
        {
          "name": "10. Create Post - Invalid Images Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates images format issue\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('images');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Invalid images format\",\n  \"latitude\": 12.9716,\n  \"longitude\": 77.5946,\n  \"images\": \"not-an-array\"\n}"
            },
            "url": "{{baseUrl}}/posts",
            "description": "Failure: Create post with images not as an array"
          },
          "response": []
        },
        {
          "name": "11. Create Post - Empty Description",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates empty description\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('description');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"   \",\n  \"latitude\": 12.9716,\n  \"longitude\": 77.5946\n}"
            },
            "url": "{{baseUrl}}/posts",
            "description": "Failure: Create post with whitespace-only description"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Additional Post Operations",
      "item": [
        {
          "name": "12. List All Posts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains posts array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Response has pagination metadata\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.meta).to.have.property('total');",
                  "    pm.expect(jsonData.meta).to.have.property('page');",
                  "    pm.expect(jsonData.meta).to.have.property('pages');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["posts"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            },
            "description": "List all posts with pagination"
          },
          "response": []
        },
        {
          "name": "13. List My Posts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains posts\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {},
                "requests": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": "{{baseUrl}}/my-posts",
            "description": "Get posts created by the authenticated user"
          },
          "response": []
        },
        {
          "name": "14. React to Post - Like",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Reaction recorded\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reaction\": \"like\"\n}"
            },
            "url": "{{baseUrl}}/posts/{{postId}}/reactions",
            "description": "Like a post"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "requests": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "requests": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://public.nammarajajinagar.com"
    },
    {
      "key": "contactNumber",
      "value": "",
      "description": "Enter your mobile number here when running the collection"
    },
    {
      "key": "otp",
      "value": ""
    },
    {
      "key": "authToken",
      "value": ""
    },
    {
      "key": "userId",
      "value": ""
    },
    {
      "key": "postId",
      "value": ""
    }
  ]
}
