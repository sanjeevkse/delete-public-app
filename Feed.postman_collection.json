{
  "info": {
    "name": "feed-backend",
    "_postman_id": "82f90f6e-6c8e-4d9d-b4e7-3d5ddc3a1fbc",
    "description": "Postman collection covering feed-backend REST APIs.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/health",
          "host": ["{{baseUrl}}"],
          "path": ["api", "health"]
        }
      }
    },
    {
      "name": "Auth",
      "item": [
        {
          "name": "Request OTP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contactNumber\": \"+15551234567\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/request-otp",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "request-otp"]
            },
            "description": "Generates a one-time password for the provided contact number and returns it in the response for testing. The response includes the remaining attemptsLeft; calling again before the OTP expires decrements attemptsLeft until it reaches zero."
          }
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contactNumber\": \"+15551234567\",\n  \"otp\": \"{{otpCode}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Verifies the OTP (or the master OTP) for the supplied mobile number. If the contact number has not been seen before, a new user is provisioned automatically. Returns the JWT, the user profile + access details, and a userExists flag to indicate whether the user pre-existed."
          }
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"demo@example.com\",\n  \"fullName\": \"Demo User\",\n  \"profile\": {\n    \"displayName\": \"Demo User\",\n    \"bio\": \"Community volunteer\",\n    \"dateOfBirth\": \"1990-01-01\",\n    \"gender\": \"FEMALE\",\n    \"occupation\": \"Organizer\",\n    \"fullAddress\": \"221B Baker Street\",\n    \"addressLine1\": \"221B Baker Street\",\n    \"addressLine2\": \"Marylebone\",\n    \"city\": \"London\",\n    \"state\": \"England\",\n    \"postalCode\": \"NW16XE\",\n    \"country\": \"UK\",\n    \"alternateMobileNumber\": \"+15559870000\",\n    \"wardNumberId\": 12,\n    \"boothNumberId\": 3,\n    \"latitude\": 27.7172,\n    \"longitude\": 85.324,\n    \"instagramId\": \"demo.insta\",\n    \"socialLinksJson\": {\n      \"twitter\": \"@demo\"\n    },\n    \"preferencesJson\": {\n      \"notifications\": true\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "profile"]
            },
            "description": "Updates the authenticated user's editable fields across User and UserProfile models (contact number and administrative flags remain read-only). Requires a valid Bearer token obtained from the Login endpoint."
          }
        },
        {
          "name": "Update Profile Image",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "profileImage",
                  "type": "file",
                  "src": "/path/to/local/avatar.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/profile/image",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "profile", "image"]
            },
            "description": "Uploads a new avatar for the authenticated user. Submit a single profileImage file (JPEG/PNG/WEBP/HEIC). The response returns the updated user record."
          }
        },
        {
          "name": "Sidebar Permissions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/sidebar",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "sidebar"]
            },
            "description": "Returns the permission groups and their accessible permissions for the authenticated user. Users with the wildcard (*) grant receive all groups."
          }
        }
      ]
    },
    {
      "name": "Posts",
      "item": [
        {
          "name": "List Posts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/posts?tags=community&latitude=27.7172&longitude=85.3240&search=cleanup&page=1&limit=20&sort=DESC",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts"],
              "query": [
                {
                  "key": "tags",
                  "value": "community",
                  "description": "Optional: filter posts containing the tag substring."
                },
                {
                  "key": "latitude",
                  "value": "27.7172",
                  "description": "Optional: exact match latitude filter."
                },
                {
                  "key": "longitude",
                  "value": "85.3240",
                  "description": "Optional: exact match longitude filter."
                },
                {
                  "key": "search",
                  "value": "cleanup",
                  "description": "Optional: search term applied to the post description."
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Optional: page number (defaults to 1)."
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Optional: page size up to 100 (defaults to 20)."
                },
                {
                  "key": "sort",
                  "value": "DESC",
                  "description": "Optional: sort direction for creation date (ASC or DESC, defaults to DESC)."
                }
              ]
            },
            "description": "Lists active posts with optional tag and location filters. Pass `sort=ASC` for oldest-first; default is `DESC`. Reaction counts and active media entries are embedded in each record."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Response contains data array\", function () {",
                  "  pm.expect(Array.isArray(jsonData && jsonData.data)).to.be.true;",
                  "});",
                  "if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
                  "  var first = jsonData.data[0];",
                  "  if (first && first.id) {",
                  "    pm.collectionVariables.set(\"postId\", first.id);",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Post",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/posts/{{postId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts", "{{postId}}"]
            },
            "description": "Retrieves a single active post by id including media, author, and aggregated reaction counts."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Post id returned\", function () {",
                  "  pm.expect(jsonData && jsonData.id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "List My Posts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/my-posts?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "my-posts"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Optional: page number (defaults to 1)."
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Optional: page size up to 100 (defaults to 20)."
                }
              ]
            },
            "description": "Lists only the authenticated creator's active posts with pagination."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Response contains data array\", function () {",
                  "  pm.expect(Array.isArray(jsonData && jsonData.data)).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Post",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "description",
                  "value": "Community clean-up drive",
                  "type": "text"
                },
                {
                  "key": "tags",
                  "value": "community,cleanup",
                  "type": "text"
                },
                {
                  "key": "latitude",
                  "value": "27.7172",
                  "type": "text"
                },
                {
                  "key": "longitude",
                  "value": "85.3240",
                  "type": "text"
                },
                {
                  "key": "media",
                  "type": "file",
                  "src": "/path/to/local/before.jpg"
                },
                {
                  "key": "media",
                  "type": "file",
                  "src": "/path/to/local/after.mp4"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/posts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts"]
            },
            "description": "Creates a new post for the authenticated user. Submit the request as multipart/form-data with optional `media` files (JPEG/PNG/WEBP/HEIC images or MP4 videos, max 4 images + 1 video at 5MB each). Uploaded media becomes available from `{{baseUrl}}/uploads/...`."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "var postId = jsonData && (jsonData.id || (jsonData.data && jsonData.data.id));",
                  "if (postId) {",
                  "  pm.collectionVariables.set(\"postId\", postId);",
                  "}",
                  "pm.test(\"Post ID stored\", function () {",
                  "  pm.expect(pm.collectionVariables.get(\"postId\")).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Post",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Community clean-up drive update\",\n  \"tags\": \"cleanup,community\",\n  \"latitude\": 27.7172,\n  \"longitude\": 85.3240\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/posts/{{postId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts", "{{postId}}"]
            },
            "description": "Updates a post's textual metadata (description, tags, and coordinates). Only the original creator or an admin can modify it. To manage media, use the dedicated media endpoints."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "if (jsonData && jsonData.id) {",
                  "  pm.collectionVariables.set(\"postId\", jsonData.id);",
                  "}",
                  "pm.test(\"Response includes post id\", function () {",
                  "  pm.expect(jsonData && jsonData.id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Post Media",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "media",
                  "type": "file",
                  "src": "/path/to/local/day-one.jpg"
                },
                {
                  "key": "media",
                  "type": "file",
                  "src": "/path/to/local/day-two.mp4"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/posts/{{postId}}/media",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts", "{{postId}}", "media"]
            },
            "description": "Appends additional media to an existing post. Provide uploads via `media` file fields while respecting the 4 image / 1 video limit."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Remove Post Media",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mediaIds\": [123, 456]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/posts/{{postId}}/media",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts", "{{postId}}", "media"]
            },
            "description": "Soft deletes one or more media items from a post by marking them inactive. Pass the media IDs to remove."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Post",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/posts/{{postId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts", "{{postId}}"]
            },
            "description": "Soft deletes a post. Only the creator or an admin may perform this action."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "  pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "React To Post",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reaction\": \"LIKE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/posts/{{postId}}/reactions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts", "{{postId}}", "reactions"]
            },
            "description": "Adds or updates the caller's reaction for the post. Use LIKE or DISLIKE to react, or NO_REACTION to clear an existing reaction. Returns the updated reaction counts."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Counts present\", function () {",
                  "  pm.expect(jsonData && jsonData.counts && jsonData.counts.likesCount).to.not.be.undefined;",
                  "  pm.expect(jsonData && jsonData.counts && jsonData.counts.dislikesCount).to.not.be.undefined;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Events",
      "item": [
        {
          "name": "List Events",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/events?title=cleanup&place=central&startDateFrom=2024-01-01&startDateTo=2024-12-31&search=community&page=1&limit=20&sort=ASC",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events"],
              "query": [
                {
                  "key": "title",
                  "value": "cleanup",
                  "description": "Optional: filter by event title."
                },
                {
                  "key": "place",
                  "value": "central",
                  "description": "Optional: filter by place substring."
                },
                {
                  "key": "startDateFrom",
                  "value": "2024-01-01",
                  "description": "Optional: start date lower bound (YYYY-MM-DD)."
                },
                {
                  "key": "startDateTo",
                  "value": "2024-12-31",
                  "description": "Optional: start date upper bound (YYYY-MM-DD)."
                },
                {
                  "key": "search",
                  "value": "community",
                  "description": "Optional: search term applied to title or description."
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Optional: page number (defaults to 1)."
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Optional: page size up to 100 (defaults to 20)."
                },
                {
                  "key": "sort",
                  "value": "ASC",
                  "description": "Optional: sort direction for start date/time (ASC or DESC, defaults to ASC)."
                }
              ]
            },
            "description": "Lists active events with pagination and optional filters for title, place, or date range. Set `sort=DESC` for the latest events first (default is `ASC`)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Response contains data array\", function () {",
                  "  pm.expect(Array.isArray(jsonData && jsonData.data)).to.be.true;",
                  "});",
                  "if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
                  "  var first = jsonData.data[0];",
                  "  if (first && first.id) {",
                  "    pm.collectionVariables.set(\"eventId\", first.id);",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Event",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events", "{{eventId}}"]
            },
            "description": "Retrieves a single active event along with its media and registration count."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Event id returned\", function () {",
                  "  pm.expect(jsonData && jsonData.id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "Community Cleanup Drive",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "Neighborhood volunteers gather for a cleanup.",
                  "type": "text"
                },
                {
                  "key": "place",
                  "value": "Central Park",
                  "type": "text"
                },
                {
                  "key": "googleMapLink",
                  "value": "https://maps.google.com/?q=Central+Park",
                  "type": "text"
                },
                {
                  "key": "startDate",
                  "value": "2024-12-01",
                  "type": "text"
                },
                {
                  "key": "startTime",
                  "value": "09:00",
                  "type": "text"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-01",
                  "type": "text"
                },
                {
                  "key": "endTime",
                  "value": "12:00",
                  "type": "text"
                },
                {
                  "key": "media",
                  "type": "file",
                  "src": "/path/to/event-banner.jpg"
                },
                {
                  "key": "media",
                  "type": "file",
                  "src": "/path/to/event-promo.mp4"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/events",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events"]
            },
            "description": "Creates a new event for the authenticated user. Submit as multipart/form-data with optional `media` files (JPEG/PNG/WEBP/HEIC images or MP4 videos, max 4 photos + 1 video at 5MB each). Text-only submissions still work if media is omitted."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "var eventId = jsonData && (jsonData.id || (jsonData.data && jsonData.data.id));",
                  "if (eventId) {",
                  "  pm.collectionVariables.set(\"eventId\", eventId);",
                  "}",
                  "pm.test(\"Event ID stored\", function () {",
                  "  pm.expect(pm.collectionVariables.get(\"eventId\")).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Event",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Updated agenda with additional workshops.\",\n  \"startTime\": \"10:00\",\n  \"endTime\": \"14:00\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events", "{{eventId}}"]
            },
            "description": "Updates event details. Media updates must be handled using the dedicated media endpoints."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "if (jsonData && jsonData.id) {",
                  "  pm.collectionVariables.set(\"eventId\", jsonData.id);",
                  "}",
                  "pm.test(\"Event id present\", function () {",
                  "  pm.expect(jsonData && jsonData.id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Event Media",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "media",
                  "type": "file",
                  "src": "/path/to/event-image.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/events/{{eventId}}/media",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events", "{{eventId}}", "media"]
            },
            "description": "Uploads additional media for an existing event (max 4 images + 1 video in total, each ≤ 5MB). Update the file path before sending."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Media array present\", function () {",
                  "  pm.expect(jsonData && Array.isArray(jsonData.media)).to.be.true;",
                  "});",
                  "if (jsonData && Array.isArray(jsonData.media) && jsonData.media.length > 0) {",
                  "  var lastMedia = jsonData.media[jsonData.media.length - 1];",
                  "  if (lastMedia && lastMedia.id) {",
                  "    pm.collectionVariables.set(\"eventMediaId\", lastMedia.id);",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Remove Event Media",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mediaIds\": [{{eventMediaId}}]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/events/{{eventId}}/media",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events", "{{eventId}}", "media"]
            },
            "description": "Soft-deletes one or more media items from an event. Provide mediaIds from the add media response."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Media array present\", function () {",
                  "  pm.expect(jsonData && Array.isArray(jsonData.media)).to.be.true;",
                  "});",
                  "var removedId = Number(pm.collectionVariables.get(\"eventMediaId\"));",
                  "if (jsonData && Array.isArray(jsonData.media) && removedId) {",
                  "  var exists = jsonData.media.some(function (item) { return item && item.id === removedId; });",
                  "  pm.expect(exists, \"Removed media should not be present\").to.be.false;",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Event",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events", "{{eventId}}"]
            },
            "description": "Soft deletes an event and its media/registrations."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "  pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Register For Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/events/{{eventId}}/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events", "{{eventId}}", "register"]
            },
            "description": "Registers the authenticated user for the selected event, reactivating any soft-deleted registration."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "  pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Registration object present\", function () {",
                  "  pm.expect(jsonData && jsonData.registration).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Unregister From Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Unable to attend\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/events/{{eventId}}/unregister",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events", "{{eventId}}", "unregister"]
            },
            "description": "Soft-unregisters the authenticated user from the event. Optionally include a reason."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "List Event Registrations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/events/{{eventId}}/registrations?includeUnregistered=false&page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events", "{{eventId}}", "registrations"],
              "query": [
                {
                  "key": "includeUnregistered",
                  "value": "false",
                  "description": "Optional: set to true to include inactive (status 0) registrations."
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Optional pagination page (defaults to 1)."
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Optional page size up to 100 (defaults to 20)."
                }
              ]
            },
            "description": "Lists registrations for a specific event, including registrant profile details. Use includeUnregistered=true to include soft-unregistered entries."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Response contains data array\", function () {",
                  "  pm.expect(Array.isArray(jsonData && jsonData.data)).to.be.true;",
                  "});",
                  "pm.test(\"includeUnregistered flag echoes request\", function () {",
                  "  pm.expect(jsonData && jsonData.includeUnregistered).to.eql(false);",
                  "});",
                  "if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
                  "  var first = jsonData.data[0];",
                  "  pm.test(\"Registration has user details\", function () {",
                  "    pm.expect(first && first.user && first.user.id).to.exist;",
                  "    pm.expect(first.user).to.have.property(\"fullName\");",
                  "    pm.expect(first.user).to.have.property(\"email\");",
                  "    pm.expect(first.user).to.have.property(\"contactNumber\");",
                  "  });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Jobs",
      "item": [
        {
          "name": "List Jobs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/jobs?status=1&submittedFor=self&page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "jobs"],
              "query": [
                {
                  "key": "status",
                  "value": "1",
                  "description": "Optional: filter by status (0 inactive, 1 active, omit or all for both)."
                },
                {
                  "key": "submittedFor",
                  "value": "self",
                  "description": "Optional: filter by submission type (self or others)."
                },
                {
                  "key": "sort",
                  "value": "DESC",
                  "description": "Optional: sort direction for created date (`ASC` or `DESC`, default `DESC`)."
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Optional: page number (defaults to 1)."
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Optional: page size up to 100 (defaults to 20)."
                }
              ]
            },
            "description": "Lists job applications with pagination, optional status/submission filters, and customizable sort order. Responses include applicant profile details when available."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Response contains data array\", function () {",
                  "  pm.expect(Array.isArray(jsonData && jsonData.data)).to.be.true;",
                  "});",
                  "if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
                  "  var first = jsonData.data[0];",
                  "  if (first && first.id) {",
                  "    pm.collectionVariables.set(\"jobId\", first.id);",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Job",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "jobs", "{{jobId}}"]
            },
            "description": "Retrieves a single active job application with applicant details if available."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Job id returned\", function () {",
                  "  pm.expect(jsonData && jsonData.id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Job",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "submittedFor",
                  "value": "others",
                  "type": "text"
                },
                {
                  "key": "fullName",
                  "value": "Jane Applicant",
                  "type": "text"
                },
                {
                  "key": "email",
                  "value": "applicant@example.com",
                  "type": "text"
                },
                {
                  "key": "contactNumber",
                  "value": "+15551234567",
                  "type": "text"
                },
                {
                  "key": "alternativeContactNumber",
                  "value": "+15559876543",
                  "type": "text"
                },
                {
                  "key": "fullAddress",
                  "value": "123 Demo Street, Springfield",
                  "type": "text"
                },
                {
                  "key": "education",
                  "value": "B.A. in Social Work",
                  "type": "text"
                },
                {
                  "key": "workExperience",
                  "value": "3 years volunteering with local NGOs",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "Looking for community outreach opportunities.",
                  "type": "text"
                },
                {
                  "key": "resume",
                  "type": "file",
                  "src": "/path/to/local/resume.pdf"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/jobs",
              "host": ["{{baseUrl}}"],
              "path": ["api", "jobs"]
            },
            "description": "Creates a new job application. When applying for others, include contact and address details plus the resume file (PDF, DOC, DOCX up to 25 MB)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Job id returned\", function () {",
                  "  pm.expect(jsonData && jsonData.id).to.exist;",
                  "});",
                  "if (jsonData && jsonData.id) {",
                  "  pm.collectionVariables.set(\"jobId\", jsonData.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Job",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "submittedFor",
                  "value": "others",
                  "type": "text"
                },
                {
                  "key": "fullName",
                  "value": "Updated Applicant",
                  "type": "text"
                },
                {
                  "key": "email",
                  "value": "updated.applicant@example.com",
                  "type": "text"
                },
                {
                  "key": "contactNumber",
                  "value": "+15557654321",
                  "type": "text"
                },
                {
                  "key": "fullAddress",
                  "value": "456 Example Avenue, Springfield",
                  "type": "text"
                },
                {
                  "key": "education",
                  "value": "Masters in Community Development",
                  "type": "text"
                },
                {
                  "key": "workExperience",
                  "value": "5 years coordinating social programs",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "Updated motivation for the application.",
                  "type": "text"
                },
                {
                  "key": "resume",
                  "type": "file",
                  "src": "/path/to/local/updated-resume.pdf"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "jobs", "{{jobId}}"]
            },
            "description": "Updates an existing job application. Submit the same required fields; include a resume file to replace the previous upload."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Job id returned\", function () {",
                  "  pm.expect(jsonData && jsonData.id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Job",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "jobs", "{{jobId}}"]
            },
            "description": "Soft deletes a job application by setting status to 0."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "  pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Schemes",
      "item": [
        {
          "name": "List Schemes",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/schemes?status=1&search=grant&sortBy=createdAt&sortOrder=DESC&page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "schemes"],
              "query": [
                {
                  "key": "status",
                  "value": "1",
                  "description": "Optional: filter by status (0 inactive, 1 active, omit or all for both)."
                },
                {
                  "key": "search",
                  "value": "grant",
                  "description": "Optional: fuzzy search across scheme name and description."
                },
                {
                  "key": "sortBy",
                  "value": "createdAt",
                  "description": "Optional: sort field (createdAt, updatedAt, schemeName, status)."
                },
                {
                  "key": "sortOrder",
                  "value": "DESC",
                  "description": "Optional: sort direction (`ASC` or `DESC`, default `DESC`)."
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Optional: page number (defaults to 1)."
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Optional: page size up to 100 (defaults to 20)."
                }
              ]
            },
            "description": "Lists scheme records with pagination, search, and sort controls."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Response contains data array\", function () {",
                  "  pm.expect(Array.isArray(jsonData && jsonData.data)).to.be.true;",
                  "});",
                  "if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
                  "  var first = jsonData.data[0];",
                  "  if (first && first.id) {",
                  "    pm.collectionVariables.set(\"schemeId\", first.id);",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Scheme",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/schemes/{{schemeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "schemes", "{{schemeId}}"]
            },
            "description": "Retrieves a single active scheme."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Scheme id returned\", function () {",
                  "  pm.expect(jsonData && jsonData.id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Scheme",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"schemeName\": \"Skill Development Grant\",\n  \"description\": \"Financial support for vocational training participants.\",\n  \"status\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/schemes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "schemes"]
            },
            "description": "Creates a new scheme record."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "if (jsonData && jsonData.id) {",
                  "  pm.collectionVariables.set(\"schemeId\", jsonData.id);",
                  "}",
                  "pm.test(\"Scheme id stored\", function () {",
                  "  pm.expect(pm.collectionVariables.get(\"schemeId\")).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Scheme",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"schemeName\": \"Skill Development Grant - Updated\",\n  \"description\": \"Revised guidelines for the vocational training support scheme.\",\n  \"status\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/schemes/{{schemeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "schemes", "{{schemeId}}"]
            },
            "description": "Updates a scheme's name, description, or status."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "var jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch (err) {",
                  "  jsonData = {};",
                  "}",
                  "pm.test(\"Scheme id returned\", function () {",
                  "  pm.expect(jsonData && jsonData.id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Scheme",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/schemes/{{schemeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "schemes", "{{schemeId}}"]
            },
            "description": "Soft deletes the scheme by toggling status to 0."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "  pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Admin / Users",
      "item": [
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contactNumber\": \"+15550001111\",\n  \"email\": \"user1@example.com\",\n  \"fullName\": \"User One\",\n  \"roleIds\": [\n    {{roleId}}\n  ],\n  \"profile\": {\n    \"displayName\": \"User1\",\n    \"address\": \"99 Demo Street, Springfield\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "users"]
            }
          }
        },
        {
          "name": "List Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/users?page=1&limit=25",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "25"
                }
              ]
            }
          }
        },
        {
          "name": "Get User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"Updated User\",\n  \"profile\": {\n    \"bio\": \"Updated bio\",\n    \"address\": \"100 Updated Street\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Assign Role to User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"roleIds\": [\n    {{roleId}}\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/users/{{userId}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "users", "{{userId}}", "roles"]
            }
          }
        },
        {
          "name": "Unassign Role from User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/users/{{userId}}/roles/{{roleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "users", "{{userId}}", "roles", "{{roleId}}"]
            },
            "description": "Detaches the specified role from the user. If all roles are removed, the default public role is restored automatically."
          }
        }
      ]
    },
    {
      "name": "Admin / Roles & Permissions",
      "item": [
        {
          "name": "List Roles",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/roles",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "roles"]
            }
          }
        },
        {
          "name": "Create Role",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"dispName\": \"Admin\",\n  \"description\": \"Administrative role\",\n  \"permissions\": [\n    101,\n    102\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/roles",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "roles"]
            },
            "description": "Creates a role with the supplied numeric permission IDs. Call the permissions listing endpoint to look up IDs."
          }
        },
        {
          "name": "List Permissions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/permissions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "permissions"]
            },
            "description": "Lists every permission record (including wildcards such as posts:*). Requires the admin.permissions:list grant."
          }
        },
        {
          "name": "Update Role",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"dispName\": \"Admin\",\n  \"description\": \"Updated role description\",\n  \"permissions\": [\n    201,\n    202\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/roles/{{roleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "roles", "{{roleId}}"]
            },
            "description": "Replaces the role details along with its numeric permission IDs."
          }
        },
        {
          "name": "Delete Role",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/roles/{{roleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "roles", "{{roleId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Members",
      "item": [
        {
          "name": "Create Member",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"John Doe\",\n  \"contactNumber\": \"+1234567890\",\n  \"email\": \"john.doe@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/members",
              "host": ["{{baseUrl}}"],
              "path": ["api", "members"]
            },
            "description": "Create a new member with full name, contact number, and email"
          }
        },
        {
          "name": "List Members",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/members?page=1&limit=25",
              "host": ["{{baseUrl}}"],
              "path": ["api", "members"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number (default: 1)"
                },
                {
                  "key": "limit",
                  "value": "25",
                  "description": "Items per page (default: 25, max: 100)"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search by name, contact, or email",
                  "disabled": true
                }
              ]
            },
            "description": "List all members with pagination and optional search"
          }
        },
        {
          "name": "Search Members",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/members?search=John&page=1&limit=25",
              "host": ["{{baseUrl}}"],
              "path": ["api", "members"],
              "query": [
                {
                  "key": "search",
                  "value": "John",
                  "description": "Search keyword"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "25"
                }
              ]
            },
            "description": "Search members by full name, contact number, or email"
          }
        },
        {
          "name": "Get Member by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/members/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "members", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Member ID"
                }
              ]
            },
            "description": "Get a single member by ID"
          }
        },
        {
          "name": "Update Member",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"John Doe Updated\",\n  \"contactNumber\": \"+1234567891\",\n  \"email\": \"john.doe.updated@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/members/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "members", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Member ID"
                }
              ]
            },
            "description": "Update member details (all fields are optional)"
          }
        },
        {
          "name": "Update Member - Partial",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"John Doe Partially Updated\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/members/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "members", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Member ID"
                }
              ]
            },
            "description": "Update only specific fields of a member"
          }
        },
        {
          "name": "Delete Member",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/members/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "members", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Member ID"
                }
              ]
            },
            "description": "Delete a member by ID"
          }
        }
      ]
    },
    {
      "name": "Community Types",
      "item": [
        {
          "name": "Create Community Type",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"dispName\": \"Sports Club\",\n  \"description\": \"Community for sports enthusiasts\",\n  \"status\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/community-types",
              "host": ["{{baseUrl}}"],
              "path": ["api", "community-types"]
            },
            "description": "Create a new community type with display name, description, and status"
          }
        },
        {
          "name": "List Community Types",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/community-types?page=1&limit=25",
              "host": ["{{baseUrl}}"],
              "path": ["api", "community-types"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number (default: 1)"
                },
                {
                  "key": "limit",
                  "value": "25",
                  "description": "Items per page (default: 25, max: 100)"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search by display name or description",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Filter by status (1=active, 0=inactive)",
                  "disabled": true
                }
              ]
            },
            "description": "List all community types with pagination and optional search/status filters"
          }
        },
        {
          "name": "Search Community Types",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/community-types?search=Sports&status=1&page=1&limit=25",
              "host": ["{{baseUrl}}"],
              "path": ["api", "community-types"],
              "query": [
                {
                  "key": "search",
                  "value": "Sports",
                  "description": "Search keyword"
                },
                {
                  "key": "status",
                  "value": "1",
                  "description": "Filter by status"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "25"
                }
              ]
            },
            "description": "Search community types by display name or description with status filter"
          }
        },
        {
          "name": "Get Community Type by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/community-types/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "community-types", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Community Type ID"
                }
              ]
            },
            "description": "Get a single community type by ID"
          }
        },
        {
          "name": "Update Community Type",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"dispName\": \"Sports Club Updated\",\n  \"description\": \"Updated description for sports community\",\n  \"status\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/community-types/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "community-types", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Community Type ID"
                }
              ]
            },
            "description": "Update community type details (all fields are optional)"
          }
        },
        {
          "name": "Toggle Community Type Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/community-types/:id/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "community-types", ":id", "status"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Community Type ID"
                }
              ]
            },
            "description": "Toggle community type status (1=active, 0=inactive)"
          }
        },
        {
          "name": "Delete Community Type",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/community-types/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "community-types", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Community Type ID"
                }
              ]
            },
            "description": "Delete a community type by ID"
          }
        }
      ]
    },
    {
      "name": "Communities",
      "item": [
        {
          "name": "Create Community",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"communityTypeId\": 1,\n  \"communityName\": \"Tech Innovators Club\",\n  \"isRegistered\": 1,\n  \"registrationDate\": \"2024-10-01T00:00:00.000Z\",\n  \"contactPerson\": \"John Doe\",\n  \"contactNumber\": \"+1234567890\",\n  \"email\": \"contact@techinnovators.com\",\n  \"totalMember\": 50,\n  \"fullAddress\": \"123 Tech Street, Innovation City, IC 12345\",\n  \"status\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/communities",
              "host": ["{{baseUrl}}"],
              "path": ["api", "communities"]
            },
            "description": "Create a new community with all details"
          }
        },
        {
          "name": "List Communities",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/communities?page=1&limit=25",
              "host": ["{{baseUrl}}"],
              "path": ["api", "communities"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number (default: 1)"
                },
                {
                  "key": "limit",
                  "value": "25",
                  "description": "Items per page (default: 25, max: 100)"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search by community name, contact person, contact number, email, or address",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Filter by status (1=active, 0=inactive)",
                  "disabled": true
                },
                {
                  "key": "communityTypeId",
                  "value": "",
                  "description": "Filter by community type ID",
                  "disabled": true
                },
                {
                  "key": "isRegistered",
                  "value": "",
                  "description": "Filter by registration status (1=registered, 0=not registered)",
                  "disabled": true
                }
              ]
            },
            "description": "List all communities with pagination and optional filters"
          }
        },
        {
          "name": "Search Communities",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/communities?search=Tech&communityTypeId=1&isRegistered=1&page=1&limit=25",
              "host": ["{{baseUrl}}"],
              "path": ["api", "communities"],
              "query": [
                {
                  "key": "search",
                  "value": "Tech",
                  "description": "Search keyword"
                },
                {
                  "key": "communityTypeId",
                  "value": "1",
                  "description": "Filter by community type"
                },
                {
                  "key": "isRegistered",
                  "value": "1",
                  "description": "Filter by registration status"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "25"
                }
              ]
            },
            "description": "Search communities with multiple filters"
          }
        },
        {
          "name": "Get Community by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/communities/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "communities", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Community ID"
                }
              ]
            },
            "description": "Get a single community by ID with community type details"
          }
        },
        {
          "name": "Update Community",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"communityName\": \"Tech Innovators Club - Updated\",\n  \"contactPerson\": \"Jane Doe\",\n  \"contactNumber\": \"+1234567891\",\n  \"email\": \"newemail@techinnovators.com\",\n  \"totalMember\": 75,\n  \"fullAddress\": \"456 Innovation Avenue, Tech City, TC 54321\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/communities/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "communities", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Community ID"
                }
              ]
            },
            "description": "Update community details (all fields are optional)"
          }
        },
        {
          "name": "Toggle Community Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/communities/:id/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "communities", ":id", "status"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Community ID"
                }
              ]
            },
            "description": "Toggle community status (1=active, 0=inactive)"
          }
        },
        {
          "name": "Update Member Count",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"totalMember\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/communities/:id/member-count",
              "host": ["{{baseUrl}}"],
              "path": ["api", "communities", ":id", "member-count"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Community ID"
                }
              ]
            },
            "description": "Update community member count"
          }
        },
        {
          "name": "Delete Community",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/communities/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "communities", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "Community ID"
                }
              ]
            },
            "description": "Delete a community by ID"
          }
        }
      ]
    },
    {
      "name": "Relation Types",
      "item": [
        {
          "name": "Create Relation Type",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"dispName\": \"Father\",\n  \"description\": \"Father relationship\",\n  \"status\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/relation-types",
              "host": ["{{baseUrl}}"],
              "path": ["api", "relation-types"]
            },
            "description": "Create a new relation type"
          }
        },
        {
          "name": "List Relation Types",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/relation-types?page=1&limit=25",
              "host": ["{{baseUrl}}"],
              "path": ["api", "relation-types"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "25"
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "disabled": true
                }
              ]
            },
            "description": "List all relation types"
          }
        },
        {
          "name": "Get Relation Type by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/relation-types/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "relation-types", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            },
            "description": "Get a single relation type"
          }
        },
        {
          "name": "Update Relation Type",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"dispName\": \"Father Updated\",\n  \"description\": \"Updated description\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/relation-types/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "relation-types", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            },
            "description": "Update relation type"
          }
        },
        {
          "name": "Toggle Relation Type Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/relation-types/:id/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "relation-types", ":id", "status"],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            },
            "description": "Toggle status"
          }
        },
        {
          "name": "Delete Relation Type",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/relation-types/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "relation-types", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            },
            "description": "Delete relation type"
          }
        }
      ]
    },
    {
      "name": "Family Members",
      "item": [
        {
          "name": "Create Family Member",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": 1,\n  \"fullName\": \"John Doe Sr.\",\n  \"contactNumber\": \"+1234567890\",\n  \"email\": \"john.sr@example.com\",\n  \"fullAddress\": \"123 Main Street, City, State 12345\",\n  \"aadhaarNumber\": \"123456789012\",\n  \"relationTypeId\": 1,\n  \"status\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/family-members",
              "host": ["{{baseUrl}}"],
              "path": ["api", "family-members"]
            },
            "description": "Create a new family member"
          }
        },
        {
          "name": "List Family Members",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/family-members?page=1&limit=25",
              "host": ["{{baseUrl}}"],
              "path": ["api", "family-members"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "25"
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "userId",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "relationTypeId",
                  "value": "",
                  "disabled": true
                }
              ]
            },
            "description": "List all family members"
          }
        },
        {
          "name": "Get Family Member by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/family-members/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "family-members", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            },
            "description": "Get a single family member"
          }
        },
        {
          "name": "Update Family Member",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"John Doe Sr. Updated\",\n  \"contactNumber\": \"+1234567891\",\n  \"email\": \"john.sr.updated@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/family-members/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "family-members", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            },
            "description": "Update family member"
          }
        },
        {
          "name": "Toggle Family Member Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/family-members/:id/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "family-members", ":id", "status"],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            },
            "description": "Toggle status"
          }
        },
        {
          "name": "Delete Family Member",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/family-members/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "family-members", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            },
            "description": "Delete family member"
          }
        }
      ]
    },
    {
      "name": "Business Types",
      "item": [
        {
          "name": "Create Business Type",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"dispName\": \"Retail\",\n  \"description\": \"Retail business\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/business-types",
              "host": ["{{baseUrl}}"],
              "path": ["api", "business-types"]
            },
            "description": "Create a new business type"
          },
          "response": []
        },
        {
          "name": "Get All Business Types",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/business-types?page=1&limit=10&search=&status=1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "business-types"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": ""
                },
                {
                  "key": "status",
                  "value": "1"
                }
              ]
            },
            "description": "Get all business types"
          },
          "response": []
        },
        {
          "name": "Get Business Type by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/business-types/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "business-types", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{businessTypeId}}"
                }
              ]
            },
            "description": "Get business type by ID"
          },
          "response": []
        },
        {
          "name": "Update Business Type",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"dispName\": \"Wholesale\",\n  \"description\": \"Wholesale business\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/business-types/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "business-types", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{businessTypeId}}"
                }
              ]
            },
            "description": "Update business type"
          },
          "response": []
        },
        {
          "name": "Toggle Business Type Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/business-types/:id/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "business-types", ":id", "status"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{businessTypeId}}"
                }
              ]
            },
            "description": "Toggle business type status"
          },
          "response": []
        },
        {
          "name": "Delete Business Type",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/business-types/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "business-types", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{businessTypeId}}"
                }
              ]
            },
            "description": "Delete business type"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Businesses",
      "item": [
        {
          "name": "Create Business",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"businessName\": \"ABC Retail Store\",\n  \"businessTypeId\": 1,\n  \"pan\": \"ABCDE1234F\",\n  \"gstin\": \"22ABCDE1234F1Z5\",\n  \"contactNumber\": \"9876543210\",\n  \"email\": \"contact@abcretail.com\",\n  \"totalEmployees\": 50,\n  \"turnoverYearly\": 5000000.00,\n  \"fullAddress\": \"123 Main Street, City, State - 400001\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/businesses",
              "host": ["{{baseUrl}}"],
              "path": ["api", "businesses"]
            },
            "description": "Create a new business"
          },
          "response": []
        },
        {
          "name": "Get All Businesses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/businesses?page=1&limit=10&search=&status=1&businessTypeId=",
              "host": ["{{baseUrl}}"],
              "path": ["api", "businesses"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": ""
                },
                {
                  "key": "status",
                  "value": "1"
                },
                {
                  "key": "businessTypeId",
                  "value": ""
                }
              ]
            },
            "description": "Get all businesses"
          },
          "response": []
        },
        {
          "name": "Get Business by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/businesses/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "businesses", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{businessId}}"
                }
              ]
            },
            "description": "Get business by ID"
          },
          "response": []
        },
        {
          "name": "Update Business",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"businessName\": \"ABC Wholesale Store\",\n  \"businessTypeId\": 2,\n  \"pan\": \"ABCDE1234F\",\n  \"gstin\": \"22ABCDE1234F1Z5\",\n  \"contactNumber\": \"9876543210\",\n  \"email\": \"contact@abcwholesale.com\",\n  \"totalEmployees\": 75,\n  \"turnoverYearly\": 7500000.00,\n  \"fullAddress\": \"456 Business Park, City, State - 400002\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/businesses/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "businesses", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{businessId}}"
                }
              ]
            },
            "description": "Update business"
          },
          "response": []
        },
        {
          "name": "Toggle Business Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/businesses/:id/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "businesses", ":id", "status"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{businessId}}"
                }
              ]
            },
            "description": "Toggle business status"
          },
          "response": []
        },
        {
          "name": "Delete Business",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/businesses/:id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "businesses", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{businessId}}"
                }
              ]
            },
            "description": "Delete business"
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8081"
    },
    {
      "key": "authToken",
      "value": ""
    },
    {
      "key": "userId",
      "value": ""
    },
    {
      "key": "postId",
      "value": ""
    },
    {
      "key": "eventId",
      "value": ""
    },
    {
      "key": "eventMediaId",
      "value": ""
    },
    {
      "key": "roleId",
      "value": ""
    },
    {
      "key": "otpCode",
      "value": ""
    },
    {
      "key": "memberId",
      "value": ""
    },
    {
      "key": "communityTypeId",
      "value": ""
    },
    {
      "key": "communityId",
      "value": ""
    },
    {
      "key": "relationTypeId",
      "value": ""
    },
    {
      "key": "familyMemberId",
      "value": ""
    },
    {
      "key": "businessTypeId",
      "value": ""
    },
    {
      "key": "businessId",
      "value": ""
    }
  ]
}
